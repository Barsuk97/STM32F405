#include "stm32f4xx_hal.h"
#include <math.h>

// Define PID constants
#define PITCH_PID_KP 5
#define PITCH_PID_KI 0.1
#define PITCH_PID_KD 2
#define ROLL_PID_KP 5
#define ROLL_PID_KI 0.1
#define ROLL_PID_KD 2
#define YAW_PID_KP 5
#define YAW_PID_KI 0.1
#define YAW_PID_KD 2

// Define maximum and minimum pitch/roll angles and yaw rates
#define MAX_PITCH_ROLL_ANGLE 30
#define MAX_YAW_RATE 100

// Define altitude target and tolerance
#define ALTITUDE_TARGET 1
#define ALTITUDE_TOLERANCE 0.1

// Define maximum and minimum throttle values
#define MAX_THROTTLE 2000
#define MIN_THROTTLE 1000

// Define maximum airborne time
#define MAX_TIME_AIRBORNE 60000

// Initialize MPU-6000 and ultrasonic sensor
void MPU6000_Init(void);
float MPU6000_GetPitch(void);
float MPU6000_GetYawRate(void);
void Ultrasonic_Init(void);
float Ultrasonic_GetDistance(void);

// Set motor values
void SetMotorValues(uint16_t motor1_value, uint16_t motor2_value, uint16_t motor3_value, uint16_t motor4_value);

int main(void)
{
  // Initialize MPU-6000 and ultrasonic sensor
  MPU6000_Init();
  Ultrasonic_Init();

  // Set initial PID errors and time
  float pitch_error_integral = 0;
  float roll_error_integral = 0;
  float yaw_error_integral = 0;
  float previous_pitch_error = 0;
  float previous_roll_error = 0;
  float previous_yaw_error = 0;
  uint32_t previous_time = HAL_GetTick();

  // Take off and hold altitude
  while (1) {
    uint32_t current_time = HAL_GetTick();
    float elapsed_time = (current_time - previous_time) / 1000.0;
    previous_time = current_time;

    // Get altitude from ultrasonic sensor
    float altitude = Ultrasonic_GetDistance();

    // Calculate PID outputs
    float pitch_error = MPU6000_GetPitch() - 0;
    pitch_error = fmaxf(fminf(pitch_error, MAX_PITCH_ROLL_ANGLE), -MAX_PITCH_ROLL_ANGLE);
    pitch_error_integral += pitch_error * elapsed_time;
    float pitch_error_derivative = (pitch_error - previous_pitch_error) / elapsed_time;
    previous_pitch_error = pitch_error;
    float pitch_pid_output = PITCH_PID_KP * pitch_error + PITCH_PID_KI * pitch_error_integral + PITCH_PID_KD * pitch_error_derivative;
    pitch_pid_output = fmaxf(fminf(pitch_pid_output, MAX_PITCH_ROLL_ANGLE), -MAX_PITCH_ROLL_ANGLE);

    float roll_error = -1 * MPU6000_GetPitch();
    roll_error = fmaxf(fminf(roll_error, MAX_PITCH_ROLL_ANGLE), -MAX_PITCH_ROLL_ANGLE);
    roll_error_integral += roll_error * elapsed_time;
    float roll_error_derivative = (roll_error - previous_roll_error) / elapsed_time;
    previous_roll_error = roll_error;
    float roll_pid_output = ROLL_PID_KP * roll_error + R

    float roll_error = -1 * MPU6000_GetPitch();
roll_error = fmaxf(fminf(roll_error, MAX_PITCH_ROLL_ANGLE), -MAX_PITCH_ROLL_ANGLE);
roll_error_integral += roll_error * elapsed_time;
float roll_error_derivative = (roll_error - previous_roll_error) / elapsed_time;
previous_roll_error = roll_error;
float roll_pid_output = ROLL_PID_KP * roll_error + ROLL_PID_KI * roll_error_integral + ROLL_PID_KD * roll_error_derivative;
roll_pid_output = fmaxf(fminf(roll_pid_output, MAX_PITCH_ROLL_ANGLE), -MAX_PITCH_ROLL_ANGLE);

float yaw_error = MPU6000_GetYawRate();
yaw_error = fmaxf(fminf(yaw_error, MAX_YAW_RATE), -MAX_YAW_RATE);
yaw_error_integral += yaw_error * elapsed_time;
float yaw_error_derivative = (yaw_error - previous_yaw_error) / elapsed_time;
previous_yaw_error = yaw_error;
float yaw_pid_output = YAW_PID_KP * yaw_error + YAW_PID_KI * yaw_error_integral + YAW_PID_KD * yaw_error_derivative;
yaw_pid_output = fmaxf(fminf(yaw_pid_output, MAX_YAW_RATE), -MAX_YAW_RATE);

// Calculate motor values
uint16_t motor1_value = (uint16_t)(ALTITUDE_TARGET * 1000 + pitch_pid_output + roll_pid_output + yaw_pid_output);
uint16_t motor2_value = (uint16_t)(ALTITUDE_TARGET * 1000 - pitch_pid_output + roll_pid_output - yaw_pid_output);
uint16_t motor3_value = (uint16_t)(ALTITUDE_TARGET * 1000 - pitch_pid_output - roll_pid_output + yaw_pid_output);
uint16_t motor4_value = (uint16_t)(ALTITUDE_TARGET * 1000 + pitch_pid_output - roll_pid_output - yaw_pid_output);

// Set motor values
SetMotorValues(motor1_value, motor2_value, motor3_value, motor4_value);

// Check if altitude is within tolerance
if (fabsf(altitude - ALTITUDE_TARGET) <= ALTITUDE_TOLERANCE) {
  // Maintain altitude for 1 minute
  uint32_t airborne_start_time = HAL_GetTick();
  while (HAL_GetTick() - airborne_start_time <= MAX_TIME_AIRBORNE) {
    // Get altitude from ultrasonic sensor
    altitude = Ultrasonic_GetDistance();

    // Calculate PID outputs
    pitch_error = MPU6000_GetPitch() - 0;
    pitch_error = fmaxf(fminf(pitch_error, MAX_PITCH_ROLL_ANGLE), -MAX_PITCH_ROLL_ANGLE);
    pitch_error_integral += pitch_error * elapsed_time;
    pitch_error_derivative = (pitch_error - previous_pitch_error) / elapsed_time;
    previous_pitch_error = pitch

    roll_error = -1 * MPU6000_GetPitch();
    roll_error = fmaxf(fminf(roll_error, MAX_PITCH_ROLL_ANGLE), -MAX_PITCH_ROLL_ANGLE);
    roll_error_integral += roll_error * elapsed_time;
    roll_error_derivative = (roll_error - previous_roll_error) / elapsed_time;
    previous_roll_error = roll_error;
    yaw_error = MPU6000_GetYawRate();
    yaw_error = fmaxf(fminf(yaw_error, MAX_YAW_RATE), -MAX_YAW_RATE);
    yaw_error_integral += yaw_error * elapsed_time;
    yaw_error_derivative = (yaw_error - previous_yaw_error) / elapsed_time;
    previous_yaw_error = yaw_error;

    // Calculate motor values
    motor1_value = (uint16_t)(ALTITUDE_TARGET * 1000 + pitch_pid_output + roll_pid_output + yaw_pid_output);
    motor2_value = (uint16_t)(ALTITUDE_TARGET * 1000 - pitch_pid_output + roll_pid_output - yaw_pid_output);
    motor3_value = (uint16_t)(ALTITUDE_TARGET * 1000 - pitch_pid_output - roll_pid_output + yaw_pid_output);
    motor4_value = (uint16_t)(ALTITUDE_TARGET * 1000 + pitch_pid_output - roll_pid_output - yaw_pid_output);

    // Set motor values
    SetMotorValues(motor1_value, motor2_value, motor3_value, motor4_value);

    // Check if altitude is within tolerance
    if (fabsf(altitude - ALTITUDE_TARGET) > ALTITUDE_TOLERANCE) {
      break;
    }
  }

  // Bring drone back down
  altitude = Ultrasonic_GetDistance();
  while (altitude > 0) {
    // Calculate PID outputs
    pitch_error = MPU6000_GetPitch() - 0;
    pitch_error = fmaxf(fminf(pitch_error, MAX_PITCH_ROLL_ANGLE), -MAX_PITCH_ROLL_ANGLE);
    pitch_error_integral += pitch_error * elapsed_time;
    pitch_error_derivative = (pitch_error - previous_pitch_error) / elapsed_time;
    previous_pitch_error = pitch_error;
    roll_error = -1 * MPU6000_GetPitch();
    roll_error = fmaxf(fminf(roll_error, MAX_PITCH_ROLL_ANGLE), -MAX_PITCH_ROLL_ANGLE);
    roll_error_integral += roll_error * elapsed_time;
    roll_error_derivative = (roll_error - previous_roll_error) / elapsed_time;
    previous_roll_error = roll_error;
    yaw_error = MPU6000_GetYawRate();
    yaw_error = fmaxf(fminf(yaw_error, MAX_YAW_RATE), -MAX_YAW_RATE);
    yaw_error_integral += yaw_error * elapsed_time;
    yaw_error_derivative = (yaw_error - previous_yaw_error) / elapsed_time;
    previous_yaw_error = yaw_error;

    // Calculate motor values
    motor1_value = (uint16_t)(altitude * 1000 + pitch_pid_output + roll_pid_output + yaw_pid_output);
    motor2_value = (uint16_t)(altitude * 1000 - pitch_pid_output + roll_pid_output - yaw_pid_output);
    motor3_value = (uint16_t)(altitude * 1000 - pitch_pid_output - roll_pid_output + yaw_pid_output);
    motor4_value = (uint16_t)(altitude * 1000 + pitch_pid_output - roll_pid_output - yaw_pid_output);

    // Set motor values
    SetMotorValues(motor1_value, motor2_value, motor3_value, motor4_value);

    // Get altitude from ultrasonic sensor
    altitude = Ultrasonic_GetDistance();
  }

  // Set motor values

  SetMotorValues(0, 0, 0, 0);
}

}
}

// PID controller function
float PIDController(float error, float *error_integral, float *error_derivative, float *previous_error, float Kp, float Ki, float Kd) {
// Calculate error components
float proportional = Kp * error;
*error_integral += error;
*error_integral = fmaxf(fminf(*error_integral, MAX_I_TERM), -MAX_I_TERM);
float derivative = Kd * (*previous_error - error);
*previous_error = error;

// Calculate PID output
return proportional + Ki * (*error_integral) + derivative;
}

// Set motor values function
void SetMotorValues(uint16_t motor1_value, uint16_t motor2_value, uint16_t motor3_value, uint16_t motor4_value) {
// Set pulse width for each motor
TIM4->CCR1 = motor1_value;
TIM4->CCR2 = motor2_value;
TIM4->CCR3 = motor3_value;
TIM4->CCR4 = motor4_value;
}

// Initialize MPU-6000 sensor function
void MPU6000_Init(void) {
// Initialize SPI interface
SPI_InitTypeDef spi_init;
spi_init.Mode = SPI_MODE_MASTER;
spi_init.Direction = SPI_DIRECTION_2LINES;
spi_init.DataSize = SPI_DATASIZE_8BIT;
spi_init.CLKPolarity = SPI_POLARITY_LOW;
spi_init.CLKPhase = SPI_PHASE_1EDGE;
spi_init.NSS = SPI_NSS_SOFT;
spi_init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
spi_init.FirstBit = SPI_FIRSTBIT_MSB;
spi_init.TIMode = SPI_TIMODE_DISABLE;
spi_init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
spi_init.CRCPolynomial = 7;
HAL_SPI_Init(&hspi1, &spi_init);

// Wake up MPU-6000 sensor
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
HAL_Delay(1);

// Configure MPU-6000 sensor
uint8_t buffer[2];
buffer[0] = MPU6000_PWR_MGMT_1;
buffer[1] = 0x00;
HAL_SPI_Transmit(&hspi1, buffer, 2, 100);
buffer[0] = MPU6000_PWR_MGMT_1;
buffer[1] = 0x01;
HAL_SPI_Transmit(&hspi1, buffer, 2, 100);
buffer[0] = MPU6000_PWR_MGMT_2;
buffer[1] = 0x00;
HAL_SPI_Transmit(&hspi1, buffer, 2, 100);
buffer[0] = MPU6000_SMPLRT_DIV;
buffer[1] = 0x07;
HAL_SPI_Transmit(&hspi1, buffer, 2, 100);
buffer[0] = MPU6000_CONFIG;
buffer[1] = 0x00;
HAL_SPI_Transmit(&hspi1, buffer, 2, 100);
buffer[0] = MPU6000_GYRO_CONFIG;
buffer[1] = 0x08;
HAL_SPI_Transmit(&hspi1, buffer, 2, 100);
buffer[0] = MPU6000_ACCEL_CONFIG;
buffer[1] = 0x08;
HAL_SPI_Transmit(&hspi1, buffer, 2, 100);
}

// Get pitch angle from MPU-6000 sensor function
float MPU6000_GetPitch(void) {
uint8_t buffer[6];
buffer[0] = MPU6000_ACCEL_XOUT_H | 0x80;
HAL_SPI_Transmit(&hspi1, buffer, 1, 100);
HAL_SPI_Receive(&hspi1, buffer, 6, 100);
int16_t accel_x = (int16_t)(buffer[0] << 8 | buffer[1]);
int16_t accel_y = (int16_t)(buffer[2] << 8 | buffer[3]);
int16_t accel_z = (intt16_t)(buffer[4] << 8 | buffer[5]);

// Calculate pitch angle
float pitch = atan2f(accel_x, sqrtf(accel_y * accel_y + accel_z * accel_z));
pitch = pitch * 180.0f / M_PI;

return pitch;
}

// Initialize ultrasonic sensor function
void Ultrasonic_Init(void) {
// Configure GPIO pin as output
GPIO_InitTypeDef gpio_init;
gpio_init.Pin = GPIO_PIN_3;
gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
gpio_init.Pull = GPIO_NOPULL;
gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
HAL_GPIO_Init(GPIOA, &gpio_init);
}

// Get distance from ultrasonic sensor function
float Ultrasonic_GetDistance(void) {
// Send trigger signal
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
HAL_Delay(10);
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);

// Wait for echo signal
uint32_t start_time = HAL_GetTick();
while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET) {
if (HAL_GetTick() - start_time > 1000) {
// Timeout occurred, return maximum distance
return MAX_DISTANCE;
}
}
start_time = HAL_GetTick();
while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
if (HAL_GetTick() - start_time > 1000) {
// Timeout occurred, return maximum distance
return MAX_DISTANCE;
}
}

// Calculate distance from echo duration
float duration = (float)(HAL_GetTick() - start_time) / 1000.0f;
float distance = duration * SPEED_OF_SOUND / 2.0f;

return fminf(fmaxf(distance, MIN_DISTANCE), MAX_DISTANCE);
}

// Main program
UART_HandleTypeDef huart;
MPU6000_t MPU6000;

/* Private function prototypes */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
void Error_Handler(void);

int main(void) {
    /* MCU Configuration */
    HAL_Init();

    /* Configure the system clock */
    SystemClock_Config();

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
    MX_USART1_UART_Init();

    /* Wait for 'I' character to initialize drone */
    uint8_t buffer[1];
    while (1) {
        HAL_UART_Receive(&huart, buffer, 1, HAL_MAX_DELAY);
        if (buffer[0] == 'I') {
            break;
        }
    }

    /* Initialize MPU6000 */
    if (MPU6000_Init(&MPU6000) != HAL_OK) {
        Error_Handler();
    }

    /* Main loop */
    while (1) {
        /* Read accelerometer and gyro data from MPU6000 */
        if (MPU6000_ReadAll(&MPU6000) != HAL_OK) {
            Error_Handler();
        }

        /* Control drone height using ultrasonic sensor */
        // TODO: Implement ultrasonic sensor code

        /* Control drone stability using accelerometer and gyro data */
        // TODO: Implement drone stability control code

        /* Wait for 1 minute before landing the drone */
        HAL_Delay(60000);
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
        HAL_Delay(1000);
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
    }
}

void SystemClock_Config(void) {
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 336;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 7;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
        Error_Handler();
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
        Error_Handler();
    }
}

static void MX_USART1_UART_Init(void) {
    huart.Instance = USART1;
    huart.Init.BaudRate = 115200;
    huart.Init.WordLength = UART_WORDLENGTH_8B;
    huart.Init.StopBits = UART_STOPBITS_1;
void UART_Init(void) {
    // Initialize UART peripheral
    __HAL_RCC_USART1_CLK_ENABLE();
    huart.Instance = USART1;
    huart.Init.BaudRate = 9600;
    huart.Init.WordLength = UART_WORDLENGTH_8B;
    huart.Init.StopBits = UART_STOPBITS_1;
    huart.Init.Parity = UART_PARITY_NONE;
    huart.Init.Mode = UART_MODE_RX;
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
    HAL_UART_Init(&huart);
}

void initialize_drone(void) {
    char init_char;
    HAL_UART_Receive(&huart, &init_char, 1, HAL_MAX_DELAY);

    if (init_char == 'I') {
        initialized = 1;
    }
}
